;
;
;******************************************************************************
;
;	Arquivo de Referência para o desenvolvimento do kernel.
;
;	Versão: 2020.2
;
;	Áreas de memória
;
;	0000 - 7FFF		_KERNEL
;					Área de Kernel para implementação dos alunos
;
;	0100 - 01FF		_VETTAB
;					Tabela com os vetores das funções do kernel
;					*** CUIDADO! Esse vetor está no meio da área de código ***
;
;	8000 - FF7F		_APP
;					Área onde será colocado o programa de aplicação.
;					Esse programa vai fazer o acesso aos periféricos e interrupções, através das funções do Kernel.
;
;	FF80 - FFBF 	_IOAREA16
;					Area de perifericos, acessada na base 16 bits
;
;	FFC0 - FFFF		_IOAREA08
;					Area de perifericos, acessada na base 8 bits
;					
;******************************************************************************


_KERNEL:	equ	h0000
_VETTAB:	equ	h0100
_APP:		equ	h8000
_IOAREA16:	equ	hFF80
_IOAREA08:	equ	hFFC0


;
;------------------------------------------------------------------------------
;	Área reservada para os periféricos
;------------------------------------------------------------------------------

; Acesso em 16 bits
		org		_IOAREA16
		daw		[31]
IVET:	dw		0			; Vetor de interrupção

; Acesso em 8 bits
		org		_IOAREA08
		dab		[23]
TIMDT:	db		0			; Registro de programação do timer
INTS:	db		0			; INTERRUPT STATUS: IP x x x . x x IPStec IPStim
INTE:	db		0			; INTERRUPT ENABLE: IE x x x . x x IEStec IEStim
TECST:	db		0			; Status do teclado
TECDT:	db		0			; Dado do teclado
VISOR:	dab		[36]		; Portas de acesso ao visor

;	
;------------------------------------------------------------------------------
;	Ponto de entrada do RESET do processador
;------------------------------------------------------------------------------
		org		_KERNEL
		jmp		_RESET

;
;------------------------------------------------------------------------------
;	Area do kernel com os vetores das funções do kernel
;------------------------------------------------------------------------------
		org		_VETTAB
		dw		_SETTEC
		dw		_PUTCHAR
		dw		_SETCLOCK
		dw		_GETCLOCK
		dw		_SETTIMER
		dw		_GETTIMER
		
;	
;------------------------------------------------------------------------------
;	Código de RESET (BOOT) do processador/interrupção
;------------------------------------------------------------------------------
		org		_VETTAB+h0100
_RESET:		
; 1) Desabilitar o sistema de interrupções
	CLR INTE
; 2) Inicializar o stack pointer (SP = R6)
	MOV #h7FFF, R6
; 3) Inicializar as variáveis internas usadas pelo sistema de interrupções e periféricos (IVET, INTE, etc.)
	MOV #ISR, IVET
	CLR INTS
; 4) Inicializar as variáveis internas do kernel

; 5) Inicializar o teclado zerando o byte de estado (TECST, endereço 65498)
	CLR TECST
; 6) Inicializar o timer
	MOV #10, TIMDT
; 7) Limpar o visor
	JSR R7, limpaVisor
; 8) Habilitar interrupções
	MOV #h83, INTE
; 9) Retornar para o programa de aplicação com um desvio para o endereço _APP da memória
		jmp		_APP

limpaVisor:
	MOV R0, -(R6)
	MOV R1, -(R6)
	MOV #VISOR, R1
	MOV #36, R0
whileLimpaVisor:
	CLR (R1)
	INC R1
	SOB R0, whileLimpaVisor
	
	MOV (R6)+, R1
	MOV (R6)+, R0	

	RTS R7
;	
;------------------------------------------------------------------------------
;	Tratador de interrupções
;------------------------------------------------------------------------------
ISR:
	
	rti

;		
;------------------------------------------------------------------------------
;	Informa ao kernel o endereço da estrutura de dados onde colocar as teclas que forem digitadas.
;	O endereço de início dessa estrutura será passado para o kernel através do registrador R5.
;------------------------------------------------------------------------------
_SETTEC:
		rts		r7
		
;		
;------------------------------------------------------------------------------
;	Envia um caractere ASCII para o visor. 
;	Esse caractere pode ser um caractere visível (que tenha representação simbólica)
;		ou um caractere de controle.
;	O caractere é passado através do registrador R5.
;------------------------------------------------------------------------------
_PUTCHAR:
		rts		r7
		
;		
;------------------------------------------------------------------------------
;	Atualiza a hora atual do relógio interno do kernel.
;	Informa a hora a ser usada em três palavras de 2 bytes na memória.
;	O endereço dessas três palavras será passado para a função através do registrador R5.
;------------------------------------------------------------------------------
_SETCLOCK:
		rts		r7
		
;		
;------------------------------------------------------------------------------
;	Informa a hora atual do relógio interno do kernel.
;	Informa a hora em três palavras de 2 bytes na memória.
;	O endereço dessas três palavras será passada para a função através do registrador R5.
;------------------------------------------------------------------------------
_GETCLOCK:
		rts		r7
		
;		
;------------------------------------------------------------------------------
;	Inicializa o timer interno do kernel com o valor informado em R5,
;		que estará em formato de 16 bits, sem sinal. 
;	Esse valor estará informado o valor a ser programado no timer, em milissegundos. 
;------------------------------------------------------------------------------
_SETTIMER:
		rts		r7

;		
;------------------------------------------------------------------------------
;	Retorna ao programa de aplicação o valor atual do timer interno do kernel,
;		que foi programado com a função _SETTIMER.
;	Esse valor deve ser retornado no registrador R0.
;------------------------------------------------------------------------------
_GETTIMER:
		rts		r7


	


	

